-- 创建提示词表
CREATE TABLE IF NOT EXISTS prompts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  type TEXT NOT NULL,
  content TEXT NOT NULL,
  description TEXT,
  examples JSONB,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 创建RLS策略
ALTER TABLE prompts ENABLE ROW LEVEL SECURITY;

-- 创建提示词表的RLS策略
-- 1. 用户只能查看自己的提示词
CREATE POLICY "用户可以查看自己的提示词" ON prompts
  FOR SELECT USING (auth.uid() = user_id);

-- 2. 用户只能插入自己的提示词
CREATE POLICY "用户可以插入自己的提示词" ON prompts
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- 3. 用户只能更新自己的提示词
CREATE POLICY "用户可以更新自己的提示词" ON prompts
  FOR UPDATE USING (auth.uid() = user_id);

-- 4. 用户只能删除自己的提示词
CREATE POLICY "用户可以删除自己的提示词" ON prompts
  FOR DELETE USING (auth.uid() = user_id);

-- 创建索引
CREATE INDEX IF NOT EXISTS prompts_user_id_idx ON prompts (user_id);
CREATE INDEX IF NOT EXISTS prompts_type_idx ON prompts (type);
CREATE INDEX IF NOT EXISTS prompts_updated_at_idx ON prompts (updated_at DESC);

-- 创建触发器函数，自动更新updated_at字段
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 创建触发器
CREATE TRIGGER update_prompts_updated_at
BEFORE UPDATE ON prompts
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- 注释
COMMENT ON TABLE prompts IS '存储用户的提示词';
COMMENT ON COLUMN prompts.id IS '提示词ID';
COMMENT ON COLUMN prompts.title IS '提示词标题';
COMMENT ON COLUMN prompts.type IS '提示词类型';
COMMENT ON COLUMN prompts.content IS '提示词内容（加密）';
COMMENT ON COLUMN prompts.description IS '提示词描述';
COMMENT ON COLUMN prompts.examples IS '提示词示例';
COMMENT ON COLUMN prompts.user_id IS '用户ID';
COMMENT ON COLUMN prompts.created_at IS '创建时间';
COMMENT ON COLUMN prompts.updated_at IS '更新时间';
