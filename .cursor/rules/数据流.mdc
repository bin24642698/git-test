---
description:
globs:
alwaysApply: false
---
# 烛光写作数据流

本文档描述烛光写作应用中数据的流动和管理方式。

## 本地存储架构

应用使用IndexedDB作为本地存储方案，通过[idb库](mdc:src/lib/db.ts)实现。主要的数据集合包括：

- **works**：用户创建的写作作品
- **chapters**：作品中的章节内容
- **archives**：档案馆中的素材和设定
- **categories**：档案馆的分类
- **prompts**：用户保存的提示词模板
- **settings**：用户设置和偏好

数据库操作主要通过[dbManager.ts](mdc:src/lib/dbManager.ts)进行管理，提供了增删改查等功能。

## 状态管理

应用使用[Zustand](mdc:src/store/index.ts)作为状态管理解决方案，实现了轻量级且响应式的状态管理。主要状态模块包括：

- **作品状态**：当前正在编辑的作品和章节信息
- **档案馆状态**：当前选中的档案和分类等
- **UI状态**：模态窗口显示、加载状态等
- **设置状态**：用户设置和主题偏好

## 典型数据流路径

### 作品创建和编辑流程

1. 用户在UI界面触发创建作品操作
2. 组件调用状态管理函数
3. 状态管理函数调用数据库操作函数
4. 数据存储到IndexedDB
5. 状态更新，UI重新渲染显示新数据

### 档案馆数据流

1. 用户打开档案馆模态窗口
2. [ArchiveModal组件](mdc:src/components/archives/ArchiveModal.tsx)加载档案数据
3. 用户浏览、筛选或编辑档案
4. 修改通过状态管理同步到数据库
5. UI更新显示最新档案内容

### AI功能数据流

1. 用户触发AI写作或润色功能
2. UI显示加载状态
3. 调用[AIserver.ts](mdc:src/lib/AIserver.ts)中的函数
4. 发送请求到AI服务(如Gemini API)
5. 获取结果后更新状态
6. UI显示AI生成的内容

## 离线优先策略

应用采用离线优先策略，所有数据优先存储在本地IndexedDB中，确保在无网络环境下依然可以正常工作。这种设计使得应用具有以下特点：

- 快速响应，无需等待网络请求
- 可靠性高，不依赖网络连接
- 数据本地化，增强隐私和安全性

